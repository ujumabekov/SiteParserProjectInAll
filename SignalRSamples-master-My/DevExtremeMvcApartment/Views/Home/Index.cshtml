@using DevExtremeMvcApartment.Models

@{
    ViewBag.Title = "Index";
}

<h2>Home</h2>

@(Html.DevExtreme().DataGrid<Order>()
    .ShowBorders(true)
    .DataSource(d => d.WebApi().Controller("Orders").Key("OrderID"))
    .Columns(columns => {
        columns.AddFor(m => m.OrderID);
        columns.AddFor(m => m.OrderDate);
        columns.AddFor(m => m.CustomerName);
        columns.AddFor(m => m.ShipCountry);
        columns.AddFor(m => m.ShipCity);
    })
    .Paging(p => p.PageSize(10))
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .GroupPanel(p => p.Visible(true))
    .Grouping(g => g.AutoExpandAll(false))
    .RemoteOperations(true)
    .Summary(s => s
        .TotalItems(totalItems => {
            totalItems.AddFor(m => m.ShipCity).SummaryType(SummaryType.Count);
        })
        .GroupItems(groupItems => {
            groupItems.Add().SummaryType(SummaryType.Count);
        })
    )
)
<div>
    <fieldset>
        <legend>Connection</legend>
        <table>
            <tr>
                <td style="width: 100px">Url</td>
                <td style="width: 400px"><input type="text" id="txtUrl" value="http://localhost:8080/signalr" /></td>
            </tr>
            <tr>
                <td>User name</td>
                <td><input type="text" id="txtUserName" value="user" /></td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>
                    <button id="btnConnect" onclick="connect(); return false;">Connect</button>&nbsp;&nbsp;
                    <button id="btnDisconnect" onclick="disconnect(); return false;">Disconnect</button>
                </td>
            </tr>
        </table>
    </fieldset>
</div>
<div id="grpMessaging">
    <fieldset>
        <legend>Messaging</legend>
        <table>
            <tr>
                <td style="width: 100px">Message</td>
                <td style="width: 400px"><input type="text" id="txtMessage" value="" /></td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td><button id="btnSend" onclick="sendMessage(); return false;">Send</button></td>
            </tr>
        </table>
    </fieldset>
</div>
<div id="grpMembership">
    <fieldset>
        <legend>Group Membership</legend>
        <table>
            <tr>
                <td style="width: 100px">Group name</td>
                <td style="width: 400px"><input type="text" id="txtGroupName" value="" /></td>
            </tr>
            <tr>
                <td>&nbsp;</td>
                <td>
                    <button id="btnJoinGroup" onclick="joinToGroup(); return false;">Join</button>&nbsp;&nbsp;
                    <button id="btnLeaveGroup" onclick="leaveGroup(); return false;">Leave</button>
                </td>
            </tr>
        </table>
    </fieldset>
</div>
<div>
    <fieldset>
        <legend>Log</legend>
        <textarea id="txtLog" cols="60" rows="15"></textarea>
    </fieldset>
</div>
<div>
    <button id="btnOpenOtherPage" onclick="openOtherPage(); return false;">OtherPage</button>
</div>

<script type="text/javascript">//Reference to simpleHub proxy
        var simpleHubProxy;

        //Write given text to log area
        function writeToLog(log) {
            $("#txtLog").append(log + "&#10;&#13;")
        }

        //Connect to the SignalR server and get the proxy for simpleHub
        function connect() {

            //Load auto generated hub script dynamically and perform connection operation when loading completed
            //SignalR server location is specified by 'Url' input element, hub script must be loaded from the same location
            //For production, remove this call and uncomment the script block in the header part
            $.getScript( $("#txtUrl").val() + "/hubs", function() {

                $.connection.hub.url = $("#txtUrl").val();

                // Declare a proxy to reference the hub.
                simpleHubProxy = $.connection.simpleHub;

                //Reigster to the "AddMessage" callback method of the hub
                //This method is invoked by the hub
                simpleHubProxy.client.addMessage = function (name, message) {
                    writeToLog(name + ":" + message);
                };

                //Connect to hub
                $.connection.hub.start().done( function () {
                    writeToLog("Connected.");
                    simpleHubProxy.server.setUserName($('#txtUserName').val());
                });
            });
        }

        //Disconnect from the server
        function disconnect() {

            if(simpleHubProxy != null) {
                $.connection.hub.stop().done(function() {
                    simpleHubProxy = null;
                    writeToLog("Disconnected.");
                });
            }
        }

        //Send a message to server
        function sendMessage() {
            if(simpleHubProxy != null) {
                simpleHubProxy.server.send($('#txtMessage').val());
            }
        }

        //Join to a group on the hub
        function joinToGroup() {
            if(simpleHubProxy != null) {
                simpleHubProxy.server.joinGroup($('#txtGroupName').val());
            }
        }

        //Leave the group
        function leaveGroup() {
            if(simpleHubProxy != null) {
                simpleHubProxy.server.leaveGroup($('#txtGroupName').val());
            }
        }

        function openOtherPage() {
            window.location.href = "\Test.html";
        }</script>
